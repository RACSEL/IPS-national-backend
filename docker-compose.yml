version: '3.8'
services:
  hapi-fhir:
    image: "hapiproject/hapi:latest"
    depends_on:
      - hapi-db
    volumes:
      - ./hapi-config:/data/hapi
    ports:
      - "8080:8080"
    environment:
      SPRING_CONFIG_LOCATION: 'file:///data/hapi/application.yaml'
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://hapi-db:5433/root'
      SPRING_DATASOURCE_USERNAME: 'root'
      SPRING_DATASOURCE_PASSWORD: 'hapifhir2023'
      SPRING_DATASOURCE_DRIVERCLASSNAME: 'org.postgresql.Driver'
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: 'ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgres94Dialect'
    networks:
      elastic:

  hapi-db:
    image: "postgres:14.6"
    restart: always
    user: root
    environment:
      POSTGRES_DB: "root"
      POSTGRES_USER: "root"
      POSTGRES_PASSWORD: "hapifhir2023"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 20s
      timeout: 10s
      retries: 5
    command: -p 5433
    networks:
          elastic:

  hapi-fhir-bundle-signer:
    build:
      context: ./bundle-signer
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: "production"
      PROD_HAPI_FHIR: "http://host.docker.internal:8080/fhir"
      PROD_PRIVATE_KEY_FILE: "./static/key.pem"
    volumes:
      - ./bundle-signer/static:/usr/src/app/static
    networks:
      elastic:


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=snowstorm
      - cluster.name=snowstorm-cluster
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - discovery.type=single-node
    volumes:
      - ./elastic:/var/lib/elasticsearch/data
    networks:
      elastic:
        aliases:
          - es
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://es:9200" ]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - 127.0.0.1:9200:9200
    mem_reservation: 2g


  snowstorm:
    image: snomedinternational/snowstorm:latest
    container_name: snowstorm
    restart: always
    depends_on:
      elasticsearch:
        condition: service_healthy
    entrypoint: java -Xms2g -Xmx4g -jar snowstorm.jar --elasticsearch.urls=http://es:9200 --delete-indices --import=/snomed/SnomedCT_IPSTerminologyRelease.zip
    networks:
      elastic:
        aliases:
          - snowstorm
    volumes:
      - ./snomed:/snomed
    ports:
      - 8000:8080

  snowstorm-browser:
    image: snomedinternational/snomedct-browser:latest
    container_name: browser
    depends_on:
      - snowstorm
    links:
      - snowstorm:snowstorm
    networks:
      - elastic
    environment:
      - API_HOST=http://snowstorm:8080/
    ports:
      - 8082:80
    restart: always

  # openhim-mongo-db:
  #   container_name: openhim-mongo-db
  #   image: mongo:4.0
  #   networks:
  #     - openhim
  #   volumes:
  #     - "./mongo-data:/data/db"
  #   restart: unless-stopped

  # openhim-core:
  #   container_name: openhim-core
  #   image: jembi/openhim-core:v7.1.0
  #   restart: unless-stopped
  #   environment:
  #     mongo_url: "mongodb://openhim-mongo-db/openhim-development"
  #     mongo_atnaUrl: "mongodb://openhim-mongo-db/openhim-development"
  #     NODE_ENV: "development"
  #   ports:
  #     - "8083:8080"
  #     - "8084:5000"
  #     - "8085:5001"
  #   networks:
  #     - openhim
  #   healthcheck:
  #     test: "curl -sSk https://openhim-core:8083/heartbeat || exit 1"
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3

  # openhim-console:
  #   container_name: openhim-console
  #   image: jembi/openhim-console:v1.15.0
  #   restart: unless-stopped
  #   networks:
  #     - openhim
  #   ports:
  #     - "8086:80"
  #   healthcheck:
  #     test: "curl -sS http://openhim-console || exit 1"
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3

  ddcc:
    container_name: ddcc-transactions-mediator
    image: censcl/ops-ddcc-transactions-mediator:latest
    environment:
      FHIR_SERVER: 'http://hapi-fhir:8080/fhir/'
      MATCHBOX_SERVER: 'http://resource-generation-service:8080/fhir/'
      PRIVATE_KEY_FILE: '/app/cert-data/priv.pem'
    volumes:
      - ./cert-data:/app/cert-data
    ports:
      - "4321:4321"
    depends_on:
      - resource-generation-service

  resource-generation-service:
    container_name: resource-generation-service
    image: censcl/ops-ddcc-resource-generation-service:v1.0
    ports:
        - "8023:8080"

  ips-app:
    container_name: ips-app
    image: createchile/ipsapp_app:latest
    depends_on:
      database-app:
        condition: service_healthy
    ports:
      - "8085:5002"

  database-app:
    image: postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d ips"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - ./init-db-app:/docker-entrypoint-initdb.d/
      - ./postgres-data-app:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=adminips
      - POSTGRES_DB=ips

networks:
  elastic:
