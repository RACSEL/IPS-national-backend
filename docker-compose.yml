version: '3.8'
services:
  hapi-fhir:
    image: "hapiproject/hapi:latest"
    depends_on:
      - hapi-db
    volumes:
      - ./hapi-config:/data/hapi
    ports:
      - "${HAPIFHIR_PORT:-8080}:8080"
    environment:
      SPRING_CONFIG_LOCATION: 'file:///data/hapi/application.yaml'
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://hapi-db:5433/${POSTGRES_DB:-root}'
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-root}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-hapifhir2023}
      SPRING_DATASOURCE_DRIVERCLASSNAME: 'org.postgresql.Driver'
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: 'ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgres94Dialect'

  hapi-db:
    image: "postgres:14.6"
    restart: always
    user: root
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-root}
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hapifhir2023}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 20s
      timeout: 10s
      retries: 5
    command: -p 5433
    
  hapi-fhir-bundle-signer:
    build:
      context: ./bundle-signer
    ports:
      - "${HAPI_FHIR_BUNDLE_SIGNER_PORT:-3000}:3000"
    environment:
      NODE_ENV: "production"
      PROD_HAPI_FHIR: ${PROD_HAPI_FHIR:-http://hapi-fhir:8080}
      DDCC_URL: "http://ddcc:4321/"
      EXTERNAL_HAPI_FHIR: ${EXTERNAL_HAPI_FHIR:-http://lacpass.create.cl:8080/fhir}
      PROD_PRIVATE_KEY_FILE: "./static/key.pem"
    volumes:
      - ./bundle-signer/static:/usr/src/app/static


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - node.name=snowstorm
      - cluster.name=snowstorm-cluster
      - repositories.url.allowed_urls=["https://storage.googleapis.com/snowstorm-preload/"]
      - action.destructive_requires_name=false
      - "ES_JAVA_OPTS=-Xms4g -Xmx4g"
    volumes:
      - snowstorm_preload:/usr/share/elasticsearch/data
    networks:
      elastic:
        aliases:
         - es
    healthcheck:
      test: ["CMD", "curl", "-f", "http://es:9200"]
      interval: 1s
      timeout: 1s
      retries: 60
    ports:
      - 127.0.0.1:9200:9200
    mem_reservation: 4g


  snowstorm:
    image: kaikewley/snowstorm:10.4.0-beta
    container_name: snowstorm
    restart: always
    depends_on:
      elasticsearch:
        condition: service_healthy
    entrypoint: java -Xms2g -Xmx4g --add-opens java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED -cp @/app/jib-classpath-file org.snomed.snowstorm.SnowstormApplication --elasticsearch.urls=http://es:9200
    networks:
      elastic:
        aliases:
         - snowstorm
    ports:
      - 8180:8080


  snowstorm-browser:
    image: snomedinternational/snomedct-browser:latest
    container_name: browser
    depends_on:
      - snowstorm
    links:
      - snowstorm:snowstorm
    networks:
      - elastic
    environment:
      - API_HOST=http://snowstorm:8080/
    ports:
      - 8082:80
    restart: always

  init-script-snowstorm:
    image: appropriate/curl
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - .snowstorm-init-status:/status
      - ./init_snowstorm.sh:/usr/local/bin/init_snowstorm.sh
    entrypoint: /bin/sh -c 'sh /usr/local/bin/init_snowstorm.sh'
    networks:
      - elastic


  ddcc:
    container_name: ddcc-transactions-mediator
    image: censcl/ops-ddcc-transactions-mediator-lacpass-ips:v3.0
    secrets:
      - dsc-pem
      - dsc-private
    environment:
      FHIR_SERVER: ${PROD_HAPI_FHIR:-http://hapi-fhir:8080/fhir}
      MATCHBOX_SERVER: 'http://resource-generation-service:8080/fhir/'
      PRIVATE_KEY_FILE: /run/secrets/dsc-private
      PUBLIC_KEY_FILE: /run/secrets/dsc-pem
      COUNTRY_CODE: ${TNG_COUNTRY_3:?err}
    ports:
      - "${DDCC_PORT:-4321}:4321"
    depends_on:
      - resource-generation-service

  resource-generation-service:
    container_name: resource-generation-service
    image: censcl/ops-ddcc-resource-generation-service:v3.0
    ports:
        - "8080"
  
  gdhcn-validator-service:
    container_name: gdhcn-validator-service
    image: createchile/gdhcn-validator_backend:v1.1
    ports:
      - 8182:8080
    secrets:
      - tls-pem
      - tls-key
      - dsc-private
    environment:
      - POSTGRES_DB=gdhcn-validator
      - SERVER_PORT=8080
      - SPRING_DATASOURCE_URL=jdbc:postgresql://gdhcn-db:5432/gdhcn-validator
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - TNG_TLS_PEM=/run/secrets/tls-pem
      - TNG_TLS_KEY=/run/secrets/tls-key
      - TNG_DSC_PRIVATEKEY=/run/secrets/dsc-private
      - TNG_COUNTRY=${TNG_COUNTRY:?err}
      - TNG_DSC_PRIVATEKEY_KID=${TNG_DSC_PRIVATEKEY_KID:?err}
      - GDHCN_BASEURL=http://lacpass.create.cl:8182
    networks:
      - spring-postgres
    volumes:
      - ./json:/json

  gdhcn-db:
    image: postgres
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - spring-postgres
    environment:
      - POSTGRES_DB=gdhcn-validator
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root

networks:
  elastic:
  spring-postgres:

volumes:
  snowstorm_preload:
  db-data:

secrets:
  dsc-private:
    file: cert-data/DSC.key
  dsc-pem:
    file: cert-data/DSC.pem
  tls-key:
    file: cert-data/TLS.key
  tls-pem:
    file: cert-data/TLS.pem
